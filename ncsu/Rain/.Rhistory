treatment = as.factor(treatment)))
GAMmod2 <- gam(SM~ s(rain_south, bs="gp", k=10) +
s(evap_narrabri, bs = "cs", k = 25) +
Date + sm_lag1 +
s(site, k=2, bs = "re") +
+ s(treatment, k=2, bs = "re"),
data = All_data %>%
mutate(site = as.factor(site),
treatment = as.factor(treatment)))
gam.check(GAMmod2)
GAMmod2 <- gam(SM~ s(rain_south, bs="gp", k=20) +
s(evap_narrabri, bs = "cs", k = 25) +
Date + sm_lag1 +
s(site, k=2, bs = "re") +
+ s(treatment, k=2, bs = "re"),
data = All_data %>%
mutate(site = as.factor(site),
treatment = as.factor(treatment)))
gam.check(GAMmod2)
GAMmod2 <- gam(SM~ s(rain_south, bs="gp", k=25) +
s(evap_narrabri, bs = "cs", k = 10) +
Date + sm_lag1 +
s(site, k=2, bs = "re") +
+ s(treatment, k=2, bs = "re"),
data = All_data %>%
mutate(site = as.factor(site),
treatment = as.factor(treatment)))
gam.check(GAMmod2)
GAMmod2 <- gam(SM~ s(rain_south, bs="gp", k=100) +
s(evap_narrabri, bs = "cs", k = 100) +
Date + sm_lag1 +
s(site, k=2, bs = "re") +
+ s(treatment, k=2, bs = "re"),
data = All_data %>%
mutate(site = as.factor(site),
treatment = as.factor(treatment)))
GAMmod2 <- gam(SM~ s(rain_south, bs="gp", k=50) +
s(evap_narrabri, bs = "cs", k = 50) +
Date + sm_lag1 +
s(site, k=2, bs = "re") +
+ s(treatment, k=2, bs = "re"),
data = All_data %>%
mutate(site = as.factor(site),
treatment = as.factor(treatment)))
gam.check(GAMmod2)
GAMmod2 <- gam(SM~ s(rain_south, bs="gp", k=50) +
s(evap_narrabri, bs = "cs", k = 20) +
Date + sm_lag1 +
s(site, k=2, bs = "re") +
+ s(treatment, k=2, bs = "re"),
data = All_data %>%
mutate(site = as.factor(site),
treatment = as.factor(treatment)))
gam.check(GAMmod2)
GAMmod2 <- gam(SM~ s(rain_south, bs="ts", k=50) +
s(evap_narrabri, bs = "cs", k = 20) +
Date + sm_lag1 +
s(site, k=2, bs = "re") +
+ s(treatment, k=2, bs = "re"),
data = All_data %>%
mutate(site = as.factor(site),
treatment = as.factor(treatment)))
gam.check(GAMmod2)
summary(GAMmod2)
plot(GAMmod2)
GAMmod2 <- gam(SM~ s(rain_south, bs="ts", k=20) +
s(evap_narrabri, bs = "cs", k = 20) +
Date + sm_lag1 +
s(site, k=2, bs = "re") +
+ s(treatment, k=2, bs = "re"),
data = All_data %>%
mutate(site = as.factor(site),
treatment = as.factor(treatment)))
gam.check(GAMmod2)
GAMmod2 <- gam(SM~ s(rain_south, bs="ts", k=20) +
s(evap_narrabri, bs = "cs", k = 15) +
Date + sm_lag1 +
s(site, k=2, bs = "re") +
+ s(treatment, k=2, bs = "re"),
data = All_data %>%
mutate(site = as.factor(site),
treatment = as.factor(treatment)))
gam.check(GAMmod2)
summary(GAMmod2)
plot(GAMmod2)
GAMmod3 <- gam(SM~ s(rain_south,treatment,
bs = "fs", k = 30, m=2) +
s(evap_narrabri,treatment,
k = 10, bs = "fs", m=1) +
Date + s(sm_lag1,treatment, bs="fs", k = 30) + site,
data = All_data %>%
mutate(site = as.factor(site),
treatment = as.factor(treatment)))
GAMmod3 <- gam(SM~ s(rain_south,treatment,
bs = "fs", k = 30, m=2) +
s(evap_narrabri,treatment,
k = 10, bs = "fs", m=2) +
Date + s(sm_lag1,treatment, bs="fs", k = 30, m=2) + site,
data = All_data %>%
mutate(site = as.factor(site),
treatment = as.factor(treatment)))
gam.check(GAMmod3)
summary(GAMmod3)
plot(GAMmod3, residuals = T)
GAMmod3 <- gam(SM~ s(rain_south,treatment, site,
bs = "fs", k = 30, m=2) +
s(evap_narrabri,treatment, site,
k = 10, bs = "fs", m=2) +
Date + s(sm_lag1,treatment, site, bs="fs", k = 30, m=2),
data = All_data %>%
mutate(site = as.factor(site),
treatment = as.factor(treatment)))
GAMmod3 <- gam(SM~ s(rain_south,treatment, by = site,
bs = "fs", k = 30, m=2) +
s(evap_narrabri,treatment, site,
k = 10, bs = "fs", m=2) +
Date + s(sm_lag1,treatment, by = site, bs="fs", k = 30, m=2),
data = All_data %>%
mutate(site = as.factor(site),
treatment = as.factor(treatment)))
GAMmod3 <- gam(SM~ s(rain_south,treatment, by = site,
bs = "fs", k = 30, m=2) +
s(evap_narrabri,treatment, by = site,
k = 10, bs = "fs", m=2) +
Date + s(sm_lag1,treatment, by = site, bs="fs", k = 30, m=2),
data = All_data %>%
mutate(site = as.factor(site),
treatment = as.factor(treatment)))
gam.check(GAMmod3)
summary(GAMmod3)
plot(GAMmod3, residuals = T)
GAMMmod1 <- gls(SM~
rain_south +
evap_narrabri +
Date + sm_lag1 + treatment + site,
data = All_data, correlation = corAR1())
require(tidyverse)
require(lubridate)
require(mgcv)
# covariates P and ET
covariates <- read_csv("../data/processed/covariates_p_ET.csv")
colnames(covariates)[1] <- "Date"
# gauge meta data
gauges <- read_csv("../data/processed/gauge_meta.csv")
# change in soil moisture data for v2 only
Y_values <- read_csv("../data/processed/full_Y_scaledSM.csv")
# raw soil moisture data
SM_data <- read_csv("../data/processed/daily_sm_data.csv")
SM_v2_data <- SM_data %>%
select(-c(`...1`,timestamp)) %>%
mutate(loc = gsub("-","_",
gsub(" ","_",substr(device, 1, 8)))) %>%
select(Date, loc, v2) %>%
arrange(Date,loc)
Y_values_stack <- Y_values %>%
pivot_longer(WE_12_01:WW_16_08, names_to = "station", values_to = "SM")
All_data <- full_join(Y_values_stack,covariates,by="Date")
# add variables for the sites and the control etc
All_data <- full_join(All_data,gauges, by = c("station" = "loc"))
All_data$sm_lag1 <- c(rep(NA,(ncol(Y_values)-1)),
All_data$SM[1:(nrow(All_data) -
(ncol(Y_values)-1))])
All_data <- All_data %>%
select(-`sm_t-1`)
pairs(All_data[,c("SM","rain_south", "evap_narrabri","sm_lag1")])
SM_data2 <- SM_data %>%
select(-c(`...1`,timestamp)) %>%
mutate(loc = gsub("-","_",
gsub(" ","_",substr(device, 1, 8)))) %>%
select(-c(device,v13:v16))
SM_data3 <- right_join(gauges, SM_data2, by="loc") %>%
pivot_longer(v2:v12, names_to = "depth", values_to = "SM")
SM_data_avg <- SM_data3 %>%
group_by(Date, loc, site, treatment) %>%
summarise(avg_sm = mean(SM, na.rm = T),
sd_sm = sd(SM, na.rm = T))
anova_mod <- lm(SM ~ site:treatment-1, data = SM_data3)
summary(anova_mod)
plot(anova_mod)
SM_data3 %>%
mutate(site_by_treat = interaction(site,treatment)) %>%
ggplot(aes(site_by_treat,SM)) + geom_boxplot() + theme_bw()
GAMmod1 <- gam(SM~
rain_south +
evap_narrabri +
Date + sm_lag1 + treatment + site,
data = All_data)
gam.check(GAMmod1)
acf(residuals(GAMmod1))
pacf(residuals(GAMmod1))
summary(GAMmod1)
GAMMmod1 <- gls(SM~
rain_south +
evap_narrabri +
Date + sm_lag1 + treatment + site,
data = All_data, correlation = corAR1())
GAMMmod1 <- gls(SM~
rain_south +
evap_narrabri +
Date + sm_lag1 + treatment + site,
data = na.omit(All_data), correlation = corAR1())
gam.check(GAMMmod1)
acf(residuals(GAMMmod1))
pacf(residuals(GAMMmod1))
summary(GAMMmod1)
?gls
GAMMmod1 <- gls(SM~
rain_south +
evap_narrabri +
Date + sm_lag1 + treatment + site,
data = na.omit(All_data), correlation = corAR1(form = ~1|treatment))
summary(GAMMmod1)
pacf(resid(GAMMmod1))
GAMMmod1 <- gls(SM~
rain_south +
evap_narrabri +
Date + sm_lag1 + treatment + site,
data = na.omit(All_data), correlation = corARMA(p=2,q=1))
0^0.5
unlink(.Rdata)
unlink(".Rdata")
quit()
knitr::opts_chunk$set(echo = TRUE)
require(tidyverse)
require(mgcv)
AMLETT <- read_csv("AMLETT.INPUT.data.monthly.csv")
View(AMLETT)
AMLETT <- read_csv("AMLETT.INPUT.data.monthly.csv")
head(AMLETT)
unlink(".Rdata")
unlink(".Rdata")
install.packages("markdown")
knitr::opts_chunk$set(echo = TRUE)
AMLETT_fit %>%
ggplot(aes(DATE,residuals, colour = SITE)) + geom_point(alpha = 0.2) + geom_smooth(method="lm", se.fit =T) + facet_wrap(~SITE)
knitr::opts_chunk$set(echo = TRUE)
require(tidyverse)
require(mgcv)
AMLETT <- read_csv("AMLETT.INPUT.data.monthly.csv")
head(AMLETT)
AMLETT %>%
pivot_longer(Field.ET:SM, values_to = "value", names_to = "Variable") %>%
ggplot(aes(AMLETT.ET,value, colour = Variable)) + geom_point() + facet_wrap(~Variable, scales = "free")
model1 <- gam(AMLETT.ET ~ s(RAD) + s(LST) + s(EVI) + s(NDVI) +
s(LAI) + s(SM), data = AMLETT)
gam.check(model1)
summary(model1)
plot.gam(model1)
model2 <- gam(AMLETT.ET ~ s(RAD, k=50, bs = "ts") + s(LST, bs = "ts") +
s(EVI, bs = "ts") +
s(NDVI, bs = "ts") +
s(LAI, bs = "ts") + s(SM, bs="ts"), data = AMLETT)
gam.check(model2)
summary(model2)
require(gratia)
draw(model2)
Model2_predict <- predict(model2, se.fit = T)
Model2_residuals <- Model2_predict$fit - AMLETT$AMLETT.ET
AMLETT_fit <- AMLETT %>%
mutate(fit = Model2_predict$fit,
residuals = Model2_residuals)
AMLETT_fit %>%
ggplot(aes(DATE,residuals, colour = SITE)) + geom_point(alpha = 0.2) + geom_smooth(method="lm", se.fit =T) + facet_wrap(~SITE)
?geom_smooth()
?`map
``
?map
AMLETT_regr <- AMLETT_fit |>
split(AMLETT$SITE) |>
map(\(df) lm(residuals ~ DATE, data = df))
AMLETT_regr
AMLETT_regr <- AMLETT_fit |>
split(AMLETT$SITE) |>
map(\(df) lm(residuals ~ DATE, data = df)) |>
map(summary)
AMLETT_regr
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::install_tinytex()
tinytex::install_tinytex()
tinytex::install_tinytex()
require(tidyverse)
?read_docx
require(mgcv)
?gam
?gamm
set.seed(0)
dat <- gamSim(1,n=200,scale=2)
gam_mod <- gam(y~s(x0)+s(x1)+s(x2)+s(x3),data=dat)
plot(gam_mod,pages=1)
#summary(b$lme) # details of underlying lme fit
summary(gam_mod) # gam style summary of fitted model
anova(gam_mod)
gam.check(gam_mod) # simple checking plots
b <- gamm(y~s(x0)+s(x1)+s(x2)+s(x3),data=dat)
plot(b$gam,pages=1)
summary(b$lme) # details of underlying lme fit
summary(b$gam) # gam style summary of fitted model
anova(b$gam)
gam.check(b$gam) # simple checking plots
b <- gamm(y~s(x0, k=5)+s(x1, k=5)+s(x2, k=5)+s(x3, k=5),data=dat)
plot(b$gam,pages=1)
summary(b$lme) # details of underlying lme fit
summary(b$gam) # gam style summary of fitted model
b <- gamm(y~s(x0, k=7)+s(x1, k=7)+s(x2, k=7)+s(x3, k=7),data=dat)
plot(b$gam,pages=1)
summary(b$lme) # details of underlying lme fit
summary(b$gam) # gam style summary of fitted model
anova(b$gam)
gam.check(b$gam) # simple checking plots
# correlation
gam_mod1 <- gam(y~s(x0)+s(x1)+s(x2)+s(x3),data=dat, correlation = corCAR1())
plot(gam_mod1,pages=1)
#summary(b$lme) # details of underlying lme fit
summary(gam_mod1) # gam style summary of fitted model
#summary(b$lme) # details of underlying lme fit
summary(gam_mod) # gam style summary of fitted model
gam_mod <- gam(y~s(x0)+s(x1)+s(x2)+s(x3),data=dat)
plot(gam_mod,pages=1)
#summary(b$lme) # details of underlying lme fit
summary(gam_mod) # gam style summary of fitted model
b <- gamm(y~s(x0)+s(x1)+s(x2)+s(x3),data=dat)
plot(b$gam,pages=1)
summary(b$lme) # details of underlying lme fit
summary(b$gam) # gam style summary of fitted model
gam.check(b$gam) # simple checking plots
view(dat)
head(dat)
intervals(b$lme, which="var_cov")
intervals(b$lme, which="var-cov")
plot(b$gam)
plot(b$gam)
devtools::install_github("shoebodh/hydrusR")
require(hydrusR)
?hydrusR
?model_eval_R
?model_eval
warnings()
?call.H1D
getwd()
setwd("C:/Users/rver4657/OneDrive - The University of Sydney (Staff)/Uruguay/LaCorona/lacorona_ncsu/ncsu/Rain")
dir()
test <- paste(getwd(),"EM061523.csv",sep="/")
require(tidyverse)
?str_split
str_split(test,"/")
filename <- EM061523
filename <- "EM061523"
str_split(test,filename)
filename <- "EM061523.csv"
str_split(test,filename)
str_split(filename,filename)
list(test)
grep("/" test)
grep("//" test)
grep("/", test)
test
grep/("/", test)
grepl("/", test)
?grep
grep("/", test, value =T)
grep("/", test)
grepexpr("/", test)
grepgexpr("/", test)
gregexpr("/", test)
gregexpr("/", test)[[1]]
gregexpr("/", test)[1]
gregexpr("/", test)[[1]][1]
gregexpr("/", test)[[1]]
regexpr("/", test)[[1]]
regexpr("/", test)
grep("[a-z]", letters)
regexpr("/", test)
grep("/", test)
grep("[/]", test)
grep("//", test)
grep("/", test)
length(regexpr("/", test)[[1]])
length(regexpr("/", test)[[1]][[1]])
gregexpr("/", test)[[1]]
length(gregexpr("/", test)[[1]])
str_detect(test, "/")
tets[str_detect(test, "/")]
test[str_detect(test, "/")]
str_extract(test, "/")
str_detect_all(test, "/")
str_extract_all(test, "/")
str_match_all(test, "/")
str_locate_all(test, "/")
str_locate(test, "/")
str_locate_all(test, "/")
str_locate_all(test, "/")[9,"end"]
str_locate_all(test, "/")[[1]][9,"end"]
str_split(test)
str_split(test,"/")
length(str_split(test,"/")[[1]])
?basename
dirname(test)
basename(test)
i in input$user_file_names
?lag
?diff
?write.table
?write_table
?write_csv
input <- list(list("bla","blabla"),list("foo","bar"))
name <- "bla"
input[[name]]
str(input)
input <- list(user_name =list("bla","blabla"),user_path = list("foo","bar"))
str(input)
which(input$user_name==name0
)
which(input$user_name==name)
input[[which(input$user_name==name)]]
input[[]][[which(input$user_name==name)]]
input[[user_path]][[which(input$user_name==name)]]
input$user_path[[which(input$user_name==name)]]
source(Functions_Rain.R)
source("Functions_Rain.R")
source("Functions_Rain.R")
ls()
source("Functions_Rain.R")
lsf.str()
print(lsf.str())
file_path <- dir()
file_path
?dir
user_file_list <- dir("../data", pattern = ".csv")
user_file_list
user_file_list <- dir("../Rain", pattern = ".csv")
user_file_list
getwd9)
getwd())
getwd()
source("Functions_Rain.R")
print(lsf.str())
files <- read_list_files("../data")
files
files <- read_list_files("../data/")
files
read_list_files <- function(file_path, file_ext = ".csv") {
# this works if all files are in the same directory
browser()
user_file_list <- dir(file_path, pattern = file_ext)
user_path <- file_path
# return same structure as read_user_input
return(list(names = list(user_file_list),
paths = list(rep(user_path, length(user_file_list)))))
}
files <- read_list_files("../data")
dir(file_path)
getwd()
dir("../data")
dir("../Data")
dir("../")
dir("../Rain")
read_list_files <- function(file_path, file_ext = ".csv") {
# this works if all files are in the same directory
#browser()
user_file_list <- dir(file_path, pattern = file_ext)
user_path <- file_path
# return same structure as read_user_input
return(list(names = list(user_file_list),
paths = list(rep(user_path, length(user_file_list)))))
}
files <- read_list_files("../Rain")
files
test_data <- read_data_file(files$names[[1]])
read_data_file <- function(name, select_col = 2:4) {
#read in file
data <- read_csv(name, col_names = FALSE, skip=2) %>%
select(select_col)
# Rename columns
colnames(data) <- c("Date_Time", "Temp", "Event")
# Convert Date_Time to POSIXct format
data <- data %>%
mutate(Date = mdy_hms(Date_Time, tz = "America/Argentina/Buenos_Aires"))%>%
# Sort the data by 'Event' column and then by 'Date' (renamed Date_time column)
# do we want to keep Date or Date_Time?
arrange(Event, Date)%>%
# Select 'Date' and 'Event' columns and remove rows with NAs (no data)
select(Date, Event) %>%
na.omit(data)
return(data)
}
test_data <- read_data_file(files$names[[1]])
read_data_file <- function(name, file_path, select_col = 2:4) {
#read in file
data <- read_csv(paste(file_path,name,sep="/"), col_names = FALSE, skip=2) %>%
select(select_col)
# Rename columns
colnames(data) <- c("Date_Time", "Temp", "Event")
# Convert Date_Time to POSIXct format
data <- data %>%
mutate(Date = mdy_hms(Date_Time, tz = "America/Argentina/Buenos_Aires"))%>%
# Sort the data by 'Event' column and then by 'Date' (renamed Date_time column)
# do we want to keep Date or Date_Time?
arrange(Event, Date)%>%
# Select 'Date' and 'Event' columns and remove rows with NAs (no data)
select(Date, Event) %>%
na.omit(data)
return(data)
}
name <- files$names[[1]]
file_path <- files$paths[[which(files$names==name)]]
files$names
which(files$names==name)
name <- files$names[[1]][1]
file_path <- files$paths[[which(files$names[[1]]==name)]]
test_data <- read_data_file(name, file_path)
test_data
