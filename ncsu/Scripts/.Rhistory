Q <- ifelse(P > 0.2*S,
((P - 0.2*S)^2)/
(P + 0.8*S),0)
return(Q)
}
# ET function
ET_fun <- function(s, ETpotential, k_c, s_fc, alpha) {
# test whether s >= s_fc
if(s >=s_fc) {
# then ET is ETpotential
ET_act <- ETpotential
} else { # otherwise if s < s_fc
# calculate ET with formula
ET_act <- k_c*ETpotential*exp(-alpha*(s_fc - s))
}
# return the value of ET
return(ET_act)
}
# Waterbalance function
WB_fun <- function(Climate_input, par=list(CN_in, k_c, s_fc, alpha),
s0 = s_values$s[1],
Zr = 500) {
# Define some storage vectors (to later have as output)
SoilMoisture <- vector() # "relative soil saturation" (Storage)
Runoff <- vector() # Runoff total (this will combine all runoff)
ETa <- vector() # ET actual storage
Q_overflow <- vector() # saturation excess storage
# Set an initial value
SoilMoisture[1] <- s0 # here s0 is a parameter in the input
# 1. Calculate the curvenumber runoff using the unscaled rainfall!
# scale runoff to "relative soil moisture"
# note the use of par$CN_in
Runoff <- Runoff_CN(CN = par$CN_in, P = Climate_input$Lluvia)/Zr
# scale rainfall to "relative soil moisture"
Rain <- Climate_input$Lluvia/Zr
# calculate potential ET from potential ET in the data
ETpotential <- Climate_input$`ET (mm)`/Zr
browser()
# for loop
for (i in 2:nrow(Climate_input)) {
# 1. add the rainfall to old_st (st[i-1])
SoilMoisture[i] <- SoilMoisture[i-1] + Rain[i] - Runoff[i]
# 2. calculate actual ET using ET_fun defined earlier and subtract
ETa[i] <- ET_fun(SoilMoisture[i], ETpotential[i], par$k_c, par$s_fc, par$k)
# subtract from the soil saturation
SoilMoisture[i] <- SoilMoisture[i] - ETa[i]
# 3. calculate overflow
# if soil saturation > s_fc then there is overflow
if (SoilMoisture[i] > par$s_fc) {
# calculate U, but re-multiply by Zr to get mm
Q_overflow[i] <- (SoilMoisture[i] - par$s_fc)*Zr
# reset soil saturation to s_fc
SoilMoisture[i] <- par$s_fc
} else {
# there is no overflow
Q_overflow[i] <- 0
} # close if loop
} # close for loop
# recalculate Rain, Runoff and ETa by multiplying by Zr to have mm values
ETa <- ETa*Zr
Rain <- Rain*Zr
Runoff <- Runoff*Zr
# add the overflow to the runoff
Runoff <- Runoff + Q_overflow
# create output as a tibble
return(tibble(Date = Climate_input$Day, Rain = Rain,
Runoff = Runoff, SoilMoisture=SoilMoisture, ETa = ETa,
Q_overflow = Q_overflow))
}
RMSE <- function(parameters,  s0 = s_values$s[1],
Zr = 500, observed = s_values$s, inputdata = soildata) {
# check if parameters >= 0
if (any(parameters < 0)) {
out <- 99999
} else {
# otherwise calculate predictions
pred <- ...  ## Complete the function
# and root mean square residuals
out <- sqrt(mean((obs - pred)^2))
}
return(out)
}
RMSE <- function(parameters,  s0 = s_values$s[1],
Zr = 500, observed = s_values$s, inputdata = soildata) {
browser()
# check if parameters >= 0
if (any(parameters < 0)) {
out <- 99999
} else {
# otherwise calculate predictions
pred <- WB_fun(Climate_input = inputdata, par = list(CN_in = parameters[1],
k_c = parameters[2],
s_fc = parameters[3],
alpha = parameters[4]),
s0 = s0, Zr = Zr)  ## Complete the function
# and root mean square residuals
out <- sqrt(mean(( - pred)^2))
}
return(out)
}
par_in <- c(65, 1.05, 0.75, 5)
RMSE(parameters = par_in)
# Runoff
Runoff_CN <- function(CN, P) {
S <- (25400/CN)-254
Q <- ifelse(P > 0.2*S,
((P - 0.2*S)^2)/
(P + 0.8*S),0)
return(Q)
}
# ET function
ET_fun <- function(s, ETpotential, k_c, s_fc, alpha) {
# test whether s >= s_fc
if(s >=s_fc) {
# then ET is ETpotential
ET_act <- ETpotential
} else { # otherwise if s < s_fc
# calculate ET with formula
ET_act <- k_c*ETpotential*exp(-alpha*(s_fc - s))
}
# return the value of ET
return(ET_act)
}
# Waterbalance function
WB_fun <- function(Climate_input, par=list(CN_in, k_c, s_fc, alpha),
s0 = s_values$s[1],
Zr = 500) {
# Define some storage vectors (to later have as output)
SoilMoisture <- vector() # "relative soil saturation" (Storage)
Runoff <- vector() # Runoff total (this will combine all runoff)
ETa <- vector() # ET actual storage
Q_overflow <- vector() # saturation excess storage
# Set an initial value
SoilMoisture[1] <- s0 # here s0 is a parameter in the input
# 1. Calculate the curvenumber runoff using the unscaled rainfall!
# scale runoff to "relative soil moisture"
# note the use of par$CN_in
Runoff <- Runoff_CN(CN = par$CN_in, P = Climate_input$Lluvia)/Zr
# scale rainfall to "relative soil moisture"
Rain <- Climate_input$Lluvia/Zr
# calculate potential ET from potential ET in the data
ETpotential <- Climate_input$`ET (mm)`/Zr
browser()
# for loop
for (i in 2:nrow(Climate_input)) {
# 1. add the rainfall to old_st (st[i-1])
SoilMoisture[i] <- SoilMoisture[i-1] + Rain[i] - Runoff[i]
# 2. calculate actual ET using ET_fun defined earlier and subtract
ETa[i] <- ET_fun(SoilMoisture[i], ETpotential[i], par$k_c, par$s_fc, par$k)
# subtract from the soil saturation
SoilMoisture[i] <- SoilMoisture[i] - ETa[i]
# 3. calculate overflow
# if soil saturation > s_fc then there is overflow
if (SoilMoisture[i] > par$s_fc) {
# calculate U, but re-multiply by Zr to get mm
Q_overflow[i] <- (SoilMoisture[i] - par$s_fc)*Zr
# reset soil saturation to s_fc
SoilMoisture[i] <- par$s_fc
} else {
# there is no overflow
Q_overflow[i] <- 0
} # close if loop
} # close for loop
# recalculate Rain, Runoff and ETa by multiplying by Zr to have mm values
ETa <- ETa*Zr
Rain <- Rain*Zr
Runoff <- Runoff*Zr
# add the overflow to the runoff
Runoff <- Runoff + Q_overflow
# create output as a tibble
return(tibble(Date = Climate_input$Day, Rain = Rain,
Runoff = Runoff, SoilMoisture=SoilMoisture, ETa = ETa,
Q_overflow = Q_overflow))
}
RMSE(parameters = par_in)
RMSE <- function(parameters,  s0 = s_values$s[1],
Zr = 500, observed = s_values$s, inputdata = soildata) {
# check if parameters >= 0
if (any(parameters < 0)) {
out <- 99999
} else {
# otherwise calculate predictions
pred <- WB_fun(Climate_input = inputdata, par = list(CN_in = parameters[1],
k_c = parameters[2],
s_fc = parameters[3],
alpha = parameters[4]),
s0 = s0, Zr = Zr)  ## Complete the function
# and root mean square residuals
out <- sqrt(mean(( - pred)^2))
}
return(out)
}
RMSE(parameters = par_in)
str(Climate_input)
RMSE <- function(parameters,  s0 = s_values$s[1],
Zr = 500, observed = s_values$s, inputdata = soildata) {
# check if parameters >= 0
if (any(parameters < 0)) {
out <- 99999
} else {
# otherwise calculate predictions
pred <- WB_fun(Climate_input = inputdata, par = list(CN_in = parameters[1],
k_c = parameters[2],
s_fc = parameters[3],
alpha = parameters[4]),
s0 = s0, Zr = Zr)  ## Complete the function
# and root mean square residuals
out <- sqrt(mean((obs - pred$SoilMoisture)^2))
}
return(out)
}
RMSE(parameters = par_in)
RMSE <- function(parameters,  s0 = s_values$s[1],
Zr = 500, observed = s_values$s, inputdata = soildata) {
# check if parameters >= 0
if (any(parameters < 0)) {
out <- 99999
} else {
# otherwise calculate predictions
pred <- WB_fun(Climate_input = inputdata, par = list(CN_in = parameters[1],
k_c = parameters[2],
s_fc = parameters[3],
alpha = parameters[4]),
s0 = s0, Zr = Zr)  ## Complete the function
# and root mean square residuals
out <- sqrt(mean((observed - pred$SoilMoisture)^2))
}
return(out)
}
RMSE(parameters = par_in)
fitted <- optim(parameters = par_in, fn = RMSE)
fitted <- optim(par = par_in, fn = RMSE)
fitted
# Runoff
Runoff_CN <- function(CN, P) {
S <- (25400/CN)-254
Q <- ifelse(P > 0.2*S,
((P - 0.2*S)^2)/
(P + 0.8*S),0)
return(Q)
}
# ET function
ET_fun <- function(s, ETpotential, k_c, s_fc, alpha) {
# test whether s >= s_fc
if(s >=s_fc) {
# then ET is ETpotential
ET_act <- ETpotential
} else { # otherwise if s < s_fc
# calculate ET with formula
ET_act <- k_c*ETpotential*exp(-alpha*(s_fc - s))
}
# return the value of ET
return(ET_act)
}
# Waterbalance function
WB_fun <- function(Climate_input, par=list(CN_in, k_c, s_fc, alpha),
s0 = s_values$s[1],
Zr = 500) {
# Define some storage vectors (to later have as output)
SoilMoisture <- vector() # "relative soil saturation" (Storage)
Runoff <- vector() # Runoff total (this will combine all runoff)
ETa <- vector() # ET actual storage
Q_overflow <- vector() # saturation excess storage
# Set an initial value
SoilMoisture[1] <- s0 # here s0 is a parameter in the input
# 1. Calculate the curvenumber runoff using the unscaled rainfall!
# scale runoff to "relative soil moisture"
# note the use of par$CN_in
Runoff <- Runoff_CN(CN = par$CN_in, P = Climate_input$Lluvia)/Zr
# scale rainfall to "relative soil moisture"
Rain <- Climate_input$Lluvia/Zr
# calculate potential ET from potential ET in the data
ETpotential <- Climate_input$`ET (mm)`/Zr
#browser()
# for loop
for (i in 2:nrow(Climate_input)) {
# 1. add the rainfall to old_st (st[i-1])
SoilMoisture[i] <- SoilMoisture[i-1] + Rain[i] - Runoff[i]
# 2. calculate actual ET using ET_fun defined earlier and subtract
ETa[i] <- ET_fun(SoilMoisture[i], ETpotential[i], par$k_c, par$s_fc, par$k)
# subtract from the soil saturation
SoilMoisture[i] <- SoilMoisture[i] - ETa[i]
# 3. calculate overflow
# if soil saturation > s_fc then there is overflow
if (SoilMoisture[i] > par$s_fc) {
# calculate U, but re-multiply by Zr to get mm
Q_overflow[i] <- (SoilMoisture[i] - par$s_fc)*Zr
# reset soil saturation to s_fc
SoilMoisture[i] <- par$s_fc
} else {
# there is no overflow
Q_overflow[i] <- 0
} # close if loop
} # close for loop
# recalculate Rain, Runoff and ETa by multiplying by Zr to have mm values
ETa <- ETa*Zr
Rain <- Rain*Zr
Runoff <- Runoff*Zr
# add the overflow to the runoff
Runoff <- Runoff + Q_overflow
# create output as a tibble
return(tibble(Date = Climate_input$Day, Rain = Rain,
Runoff = Runoff, SoilMoisture=SoilMoisture, ETa = ETa,
Q_overflow = Q_overflow))
}
fitted <- optim(par = par_in, fn = RMSE)
fitted
RMSE(fitted$par)
plot_data <- soildata %>%
mutate(simulated = WB_fun(soildata,par = list(CN_in = fitted$par[1],
k_c = fitted$par[2],
s_fc = fitted$par[3],
alpha = fitted$par[4]))) %>%
# add the s_values
mutate(s = s_values$s)
# pivot longer to stack simulated and observed
plot_data %>%
pivot_longer(simulated:s, names_to = "variable",
values_to = "Soil saturation") %>%
ggplot(aes(Date,`Soil Saturation`, colour = variable)) + geom_line() +
theme_bw()
plot_data <- soildata %>%
mutate(simulated = WB_fun(soildata,par = list(CN_in = fitted$par[1],
k_c = fitted$par[2],
s_fc = fitted$par[3],
alpha = fitted$par[4]))$SoilMoisture) %>%
# add the s_values
mutate(s = s_values$s)
# pivot longer to stack simulated and observed
plot_data %>%
pivot_longer(simulated:s, names_to = "variable",
values_to = "Soil saturation") %>%
ggplot(aes(Date,`Soil Saturation`, colour = variable)) + geom_line() +
theme_bw()
plot_data <- soildata %>%
mutate(simulated = WB_fun(soildata,par = list(CN_in = fitted$par[1],
k_c = fitted$par[2],
s_fc = fitted$par[3],
alpha = fitted$par[4]))$SoilMoisture) %>%
# add the s_values
mutate(s = s_values$s)
# pivot longer to stack simulated and observed
plot_data %>%
pivot_longer(simulated:s, names_to = "variable",
values_to = "Soil saturation") %>%
ggplot(aes(Date,`Soil saturation`, colour = variable)) + geom_line() +
theme_bw()
View(plot_data)
plot_data <- soildata %>%
mutate(simulated = WB_fun(soildata,par = list(CN_in = fitted$par[1],
k_c = fitted$par[2],
s_fc = fitted$par[3],
alpha = fitted$par[4]))$SoilMoisture) %>%
# add the s_values
mutate(s = s_values$s)
# pivot longer to stack simulated and observed
plot_data %>%
pivot_longer(simulated:s, names_to = "variable",
values_to = "Soil saturation") %>%
ggplot(aes(Day,`Soil saturation`, colour = variable)) + geom_line() +
theme_bw()
View(s_values)
r_squared <- function(obs,pred) {
cor(obs,pred)^2
}
round(r_squared(plot_data$s,plot_data$simulated),2)
knitr::opts_chunk$set(echo = TRUE)
soildata <- read_csv("DailySoilMoisture.csv")
soildata <- read_csv("Data/DailySoilMoisture.csv")
require(tidyverse)
require(plotly)
soildata <- read_csv("Data/DailySoilMoisture.csv")
Runoff_CN <- function(CN, P) {
S <- (25400/CN)-254
Q <- ifelse(P > 0.2*S,
((P - 0.2*S)^2)/
(P + 0.8*S),0)
return(Q)
}
runoff_prediction <- Runoff_CN(CN = 65, P = soildata$Lluvia)
plot_data <- soildata %>%
mutate(Q = runoff_prediction)
p <- plot_data %>%
ggplot(aes(Day,Q)) + geom_line(colour = "blue") + theme_bw()
p
#ggplotly(p)
isco <- read_flume_output(name =
"v3110119vel.csv_processed.csv",                    path_to_file = "../Flumes/processed")
library(tidyverse)
library(plotly)
source("Functions_merge.R")
rain <- read_otip_file(name =
"OTIP_r4110119.csv",                    path_to_file = "../rain/processed")
flume <- read_flume_output(name =
"S1110119_processed.csv",                    path_to_file = "../Flumes/processed")
test_summary_rain <- sum_fun(rain)
test_summary_flume <- sum_fun(flume)
merged_df <- merge_data(test_summary_rain,test_summary_flume)
isco <- read_flume_output(name =
"v3110119vel.csv_processed.csv",                    path_to_file = "../Flumes/processed")
View(isco)
test_summary_isco <- sum_fun(isco)
View(test_summary_isco)
merged_three_df <- merge_data(merged_df,test_summary_isco)
p3 <- merged__three_df %>%
pivot_longer(2:ncol(merged_three_df),values_to = "value", names_to="variable") %>%
ggplot(aes(`Date and Time`, value, colour =vaiable)) +
geom_line() + theme_bw()
p3 <- merged_three_df %>%
pivot_longer(2:ncol(merged_three_df),values_to = "value", names_to="variable") %>%
ggplot(aes(`Date and Time`, value, colour =vaiable)) +
geom_line() + theme_bw()
ggplotly(p3)
p3 <- merged_three_df %>%
pivot_longer(2:ncol(merged_three_df),values_to = "value", names_to="variable") %>%
ggplot(aes(`Date and Time`, value, colour =variable)) +
geom_line() + theme_bw()
ggplotly(p3)
p3 <- merged_three_df %>%
pivot_longer(3:ncol(merged_three_df),values_to = "value", names_to="variable") %>%
ggplot(aes(`Date and Time`, Event)) + geom_bar(fill = "blue") +
geom_line(aes(`Date and Time`,value, colour =variable)) +
theme_bw()
ggplotly(p3)
p3 <- merged_three_df %>%
pivot_longer(3:ncol(merged_three_df),values_to = "value",
names_to="variable") %>%
ggplot(aes(`Date and Time`, Event)) +
geom_bar(stat = "identity",fill = "blue") +
geom_line(aes(`Date and Time`,value, colour =variable)) +
theme_bw()
ggplotly(p3)
p3 <- merged_three_df %>%
pivot_longer(3:ncol(merged_three_df),values_to = "value",
names_to="variable") %>%
ggplot(aes(`Date and Time`, Event*0.2)) +
geom_bar(stat = "identity",fill = "blue") +
geom_line(aes(`Date and Time`,value, colour =variable)) +
theme_bw()
ggplotly(p3)
?file
read_manual_well <- function(filename, input_dir = "../Wells/Manual") {
foo <- file(paste(input_dir, filename, sep ="/"))
data <- readLines(foo)
close(foo)
browser()
line_well <- grep("Well", data)
}
read_manual_well("Planilla cuenca 111219.doc")
setwd("C:/Users/rver4657/OneDrive - The University of Sydney (Staff)/Uruguay/LaCorona/lacorona_ncsu/ncsu/Scripts")
read_manual_well("Planilla cuenca 111219.doc")
head(data)
read_manual_well <- function(filename, input_dir = "../Wells/Manual") {
# foo <- file(paste(input_dir, filename, sep ="/"))
data <- read_docx(paste(input_dir, filename, sep ="/"))
#  close(foo)
browser()
line_well <- grep("Well", data)
}
read_manual_well("Planilla cuenca 111219.doc")
require(readr)
read_manual_well("Planilla cuenca 111219.doc")
require(textreadr)
install.packages(textreader)
install.packages("textreadr")
# Tidy tools
library(tidyverse)
# Modelling packages
library(mgcv)
# Plotting tools
library(gratia)
library(cowplot)
# Load functions for data processing and plotting
source("functions/data_plotting.R")
source("functions/model_data_processing.R")
source("functions/model_plotting.R")
# Tidy tools
library(tidyverse)
# Modelling packages
library(mgcv)
# Plotting tools
library(gratia)
library(cowplot)
# Load functions for data processing and plotting
source("functions/data_plotting.R")
source("functions/model_data_processing.R")
source("functions/model_plotting.R")
knitr::opts_chunk$set(
echo = TRUE,
dev="png",
dpi=256
)
# knit command
# rmarkdown::render(rstudioapi::getSourceEditorContext()$path,output_file = paste("rendered",paste0("HGAM_",paste(gauge_station_name,collapse="_"),".html"),sep=.Platform$file.sep))
# define the path to the model-ready data
data_path = paste('..','data','processed_data',sep=.Platform$file.sep)
# selecting the stations used for modelling (in this case 213200 is the control)
gauge_station_name <- c('WWL','WC15S1','WC21S1','213200')
# Some other examples that can be run:
# gauge_station_name <- c('SC10S1','213200') # Discrete case
# gauge_station_name <- c('WWL','WC15S1','WC21S1') # No control station
case_name <- paste(gauge_station_name,collapse='_')
# For this set of examples we know only SC10S1 is a discrete case
discrete_case <- 'SC10S1' %in% gauge_station_name
# load the preprocessed csv from the data folder
ts.data.load <- read_csv(paste(data_path,paste0(case_name,'_data_ma.csv'),sep=.Platform$file.sep))
install.packages("docxtractr")
require(docxtractr)
read_manual_well("Planilla cuenca 111219.doc")
read_manual_well("Planilla cuenca 111219.doc")
data
docx_extract_tbl(data, 1)
