---
title: "Test La Corona Groundwater Data processing"
author: "Willem & Eliana"
format: html
editor: visual
---

## Introduction

This notebook demonstrates different functions that have been developed to analyse and check the field data from La Corona, based on the original work from Prof Chip Cheshier and Prof Francois Birgand at North Carolina State University.

Scripts and functions have been developed as part of FPTA 358 funded by INIA Uy.

This document specifically focuses on the reading and processing of well files and adding the baro file data.

## Packages

To be able to run this notebook, the following R packages should be available

```{r message = FALSE}
library(tidyverse)
library(plotly)
# library(readxl)
# library(htmlwidgets)
```

## Loading the developed functions

The functions are stored in the scripts folder, the same folder as the code version of this file (the \*.qmd file).

```{r loadfunctions}
source("Functions_well.R") 
```

## Testing the functions

Read in the files from the directory

```{r read-files}
#getwd()
well_files <- list.files("../wells/automatic", pattern = ".csv")
```

Read in 1 file, the first two lines (hours) are deleted as they are often related to the sampling action

```{r readOnefile}

test_well <- read_hobo_well(paste0("../wells/automatic/",well_files[1]), plotit = T)
ggplotly(test_well$plot)
```

You can also look at the raw data

```{r welldata}
test_well$file
```

### Reading barometer pressures from the automatic file

Testing reading in the same files but plotting the 2 minute data abs pressure barom data

```{r}
test_well_baro <- read_hobo_baro(paste0("../wells/automatic/",well_files[1]))
ggplotly(test_well_baro$plot)
```

## Testing merging files

```{r}
# baro dataframe first in the function
test_merge <- Merge_baro_well(test_well_baro$file, test_well$file)
```

test the plot

```{r plot_merge}
ggplotly(test_merge$plot)
```

Different plot in time of the underlying data

```{r}
p2 <- test_merge$data %>%
  pivot_longer(c(`Abs Pressure kPa`, `Barom Pressure kPa`), 
               values_to = "pressure", 
               names_to = "type") %>%
  ggplot(aes(`Date and Time`,pressure, colour = type)) + geom_line() +
  theme_bw()

ggplotly(p2)
```
